// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var AjaxRepeat, makePromise,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  makePromise = function() {
    var dreading, outcome, resolve, status, vouch, waiting;

    status = 'unresolved';
    outcome = void 0;
    waiting = [];
    dreading = [];
    vouch = function(deed, func) {
      switch (status) {
        case 'unresolved':
          return (deed === 'fulfilled' ? waiting : dreading).push(func);
        case deed:
          return func(outcome);
      }
    };
    resolve = function(deed, value) {
      var func, funcs, ignore, _i, _len;

      if (status === !'unresolved') {
        throw new Error('The promise has already been resolved:' + status);
      }
      status = deed;
      outcome = value;
      funcs = (deed === 'fulfilled' ? waiting : dreading);
      if ((funcs != null ? funcs.length : void 0) != null) {
        for (_i = 0, _len = funcs.length; _i < _len; _i++) {
          func = funcs[_i];
          try {
            func(outcome);
          } catch (_error) {
            ignore = _error;
          }
        }
      }
      waiting = null;
      return dreading = null;
    };
    return {
      when: function(func) {
        return vouch('fulfilled', func);
      },
      fail: function(func) {
        return vouch('smashed', func);
      },
      fulfill: function(value) {
        return resolve('fulfilled', value);
      },
      smash: function(string) {
        return resolve('smashed', string);
      },
      status: function() {
        return status;
      }
    };
  };

  AjaxRepeat = (function() {
    function AjaxRepeat(api_url, options) {
      this.api_url = api_url;
      this._run = __bind(this._run, this);
      this.promise = makePromise();
      this.timer = options['timer'];
      if (this.timer == null) {
        this.timer = 1000;
      }
      this.counter = options['counter'] || 5;
      this._setAjaxCall(options['method'] || 'get');
      this.run();
    }

    AjaxRepeat.get = function(url, options) {
      return this._method_call(url, 'get', options);
    };

    AjaxRepeat.post = function(url, options) {
      return this._method_call(url, 'post', options);
    };

    AjaxRepeat["delete"] = function(url, options) {
      return this._method_call(url, 'delete', options);
    };

    AjaxRepeat.put = function(url, options) {
      return this._method_call(url, 'put', options);
    };

    AjaxRepeat._method_call = function(url, method, options) {
      options || (options = {});
      options['method'] = method;
      return new AjaxRepeat(url, options);
    };

    AjaxRepeat.prototype.when = function(cb) {
      this.promise.when(cb);
      return this;
    };

    AjaxRepeat.prototype.fail = function(cb) {
      this.promise.fail(cb);
      return this;
    };

    AjaxRepeat.prototype.run = function() {
      return setTimeout(this._run, 0);
    };

    AjaxRepeat.prototype._run = function() {
      var _this = this;

      if (this.counter <= 0) {
        return this.promise.smash('Failed to Reach API');
      } else {
        this.counter -= 1;
        return this.ajaxCall(this.api_url).success(function(results) {
          return _this.promise.fulfill(results);
        }).error(function() {
          return _this._repeatCall();
        });
      }
    };

    AjaxRepeat.prototype._repeatCall = function() {
      var _this = this;

      return setTimeout((function() {
        return _this.run();
      }), this.timer);
    };

    AjaxRepeat.prototype._setAjaxCall = function(method) {
      return this.ajaxCall = (function() {
        switch (method) {
          case 'get':
            return $.get;
          case 'post':
            return $.post;
          case 'delete':
            return $["delete"];
          case 'put':
            return $.put;
        }
      })();
    };

    return AjaxRepeat;

  })();

  window.AjaxRepeat = AjaxRepeat;

}).call(this);
